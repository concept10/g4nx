/* autogenerated by generator-font-face.js */

#pragma once

#include <nan.h>
#include <node.h>
#include <girepository.h>
#include <glib.h>
#include <cairo.h>
#include <cairo-ft.h>
#ifdef PLATFORM_WIN
#   include <cairo-win32.h>
#endif
#ifdef PLATFORM_MAC
#   include <cairo-quartz.h>
#endif

namespace GNodeJS {

namespace Cairo {


class FontFace: public Nan::ObjectWrap {
  public:
    static Nan::Persistent<v8::FunctionTemplate> constructorTemplate;
    static Nan::Persistent<v8::Function>         constructor;
    static void Initialize(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE target);
    static void SetupTemplate();
    static Local<v8::FunctionTemplate> GetTemplate();
    static Local<v8::Function> GetConstructor();

    static NAN_METHOD(New);

    static NAN_METHOD(status);
    static NAN_METHOD(getType);
    static NAN_METHOD(getReferenceCount);
    static NAN_METHOD(create);
    static NAN_METHOD(createForFtFace);
    static NAN_METHOD(createForPattern);
    #ifdef PLATFORM_WIN
    static NAN_METHOD(createForLogfontw);
    #endif
    #ifdef PLATFORM_WIN
    static NAN_METHOD(createForHfont);
    #endif
    #ifdef PLATFORM_WIN
    static NAN_METHOD(createForLogfontwHfont);
    #endif
    #ifdef PLATFORM_MAC
    static NAN_METHOD(createForCgfont);
    #endif
    #ifdef PLATFORM_MAC
    static NAN_METHOD(createForAtsuFontId);
    #endif


    FontFace(cairo_font_face_t* data);
    ~FontFace();

    cairo_font_face_t* _data;
};

class ToyFontFace: public FontFace {
  public:
    static Nan::Persistent<v8::FunctionTemplate> constructorTemplate;
    static Nan::Persistent<v8::Function>         constructor;
    static void Initialize(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE target);
    static void SetupTemplate(Local<v8::FunctionTemplate> parentTpl);
    static Local<v8::FunctionTemplate> GetTemplate();
    static Local<v8::Function> GetConstructor();

    static NAN_METHOD(New);

    static NAN_METHOD(getFamily);
    static NAN_METHOD(getSlant);
    static NAN_METHOD(getWeight);


    ToyFontFace(cairo_font_face_t* data) : FontFace(data) {};
};

class FtFontFace: public FontFace {
  public:
    static Nan::Persistent<v8::FunctionTemplate> constructorTemplate;
    static Nan::Persistent<v8::Function>         constructor;
    static void Initialize(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE target);
    static void SetupTemplate(Local<v8::FunctionTemplate> parentTpl);
    static Local<v8::FunctionTemplate> GetTemplate();
    static Local<v8::Function> GetConstructor();

    static NAN_METHOD(New);

    static NAN_METHOD(getSynthesize);
    static NAN_METHOD(setSynthesize);
    static NAN_METHOD(unsetSynthesize);


    FtFontFace(cairo_font_face_t* data) : FontFace(data) {};
};

class Win32FontFace: public FontFace {
  public:
    static Nan::Persistent<v8::FunctionTemplate> constructorTemplate;
    static Nan::Persistent<v8::Function>         constructor;
    static void Initialize(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE target);
    static void SetupTemplate(Local<v8::FunctionTemplate> parentTpl);
    static Local<v8::FunctionTemplate> GetTemplate();
    static Local<v8::Function> GetConstructor();

    static NAN_METHOD(New);




    Win32FontFace(cairo_font_face_t* data) : FontFace(data) {};
};

class QuartzFontFace: public FontFace {
  public:
    static Nan::Persistent<v8::FunctionTemplate> constructorTemplate;
    static Nan::Persistent<v8::Function>         constructor;
    static void Initialize(Nan::ADDON_REGISTER_FUNCTION_ARGS_TYPE target);
    static void SetupTemplate(Local<v8::FunctionTemplate> parentTpl);
    static Local<v8::FunctionTemplate> GetTemplate();
    static Local<v8::Function> GetConstructor();

    static NAN_METHOD(New);




    QuartzFontFace(cairo_font_face_t* data) : FontFace(data) {};
};

}; // Cairo

}; // GNodeJS